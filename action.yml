name: CalVer Creation
author: MicahWW
description: Automatically create a new CalVer following YYYY.MM.DD
branding:
  icon: 'calendar'
  color: 'blue'

inputs:
  prefix:
    description: 'The prefix that will be found in front of each version tag, and should be reused on the new one.'
    required: false
  timezone:
    description: 'The time zone to base the date on, e.g. UTC, America/Chicago, etc. (default: UTC)'
    required: false
    default: 'UTC'
  push_tag:
    description: 'If the newly created version tag should be pushed, requires github_token. (default: false)'
    required: false
    default: 'false'
  github_token:
    description: 'GitHub token for pushing tags'
    required: false
outputs:
  new_version:
    description: 'The newly generated version tag'
    value: ${{ steps.new_tag.outputs.new_version }}

runs:
  using: composite
  steps:
    - name: Checkout calling repo
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        # TODO: Use the .python-version file contents
        python-version: '3.13'
    
    - name: Install Python dependencies
      shell: bash
      # TODO: setup output grouping
      run: pip install -r ${{ github.action_path }}/requirements.txt

    - name: Pre Check
      env:
        INPUT_TIMEZONE: ${{ inputs.timezone }}
        INPUT_PUSH_TAG: ${{ inputs.push_tag }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash
      run: python ${{ github.action_path }}/pre_check.py

    - name: Generate new tag
      id: new_tag
      env:
        INPUT_TIMEZONE: ${{ inputs.timezone }}
        INPUT_PREFIX: ${{ inputs.prefix }}
      shell: bash
      run: python ${{ github.action_path }}/generate_new_tag.py

    - name: Push tag
      if: ${{ inputs.push_tag == 'true' }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ steps.new_tag.outputs.new_version }}
        git push origin ${{ steps.new_tag.outputs.new_version }}
